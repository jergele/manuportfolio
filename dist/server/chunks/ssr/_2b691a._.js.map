{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/app/components/ProjectGrid.tsx/proxy.js"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/components/ProjectGrid.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/components/ProjectGrid.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAsS,GACnU,oEACA"}},
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/app/components/ProjectGrid.tsx/proxy.js"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/components/ProjectGrid.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/components/ProjectGrid.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAkR,GAC/S,gDACA"}},
    {"offset": {"line": 29, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 35, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 45, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/app/(site)/projects/category/[slug]/page.tsx"],"sourcesContent":["import { client } from \"@/app/lib/sanity\";\r\nimport ProjectGrid from \"@/app/components/ProjectGrid\";\r\nimport { Project } from \"@/app/types\";\r\nimport { notFound } from \"next/navigation\";\r\nimport { Suspense } from \"react\";\r\nimport { use } from \"react\";\r\nimport LoadingSpinner from \"@/app/components/LoadingSpinner\";\r\n\r\n// Validate the slug parameter\r\nfunction validateSlug(slug: string | undefined): slug is string {\r\n  return typeof slug === 'string' && slug.length > 0;\r\n}\r\n\r\n// Fetch data component\r\nasync function CategoryContent({ slug }: { slug: string }) {\r\n  try {\r\n    const [projects, category] = await Promise.all([\r\n      client.fetch(\r\n        `*[_type == \"project\" && category->slug.current == $slug] {\r\n          _id,\r\n          title,\r\n          slug,\r\n          mainImage,\r\n          year,\r\n          description,\r\n          category->{\r\n            _id,\r\n            title,\r\n            slug\r\n          },\r\n          images[] {\r\n            image,\r\n            caption\r\n          }\r\n        }`,\r\n        { slug }\r\n      ),\r\n      client.fetch(\r\n        `*[_type == \"category\" && slug.current == $slug][0] {\r\n          _id,\r\n          title,\r\n          slug\r\n        }`,\r\n        { slug }\r\n      ),\r\n    ]);\r\n\r\n    if (!category) return notFound();\r\n\r\n    return (\r\n      <div className=\"pt-14 px-8\">\r\n        <ProjectGrid projects={projects} />\r\n      </div>\r\n    );\r\n  } catch (error) {\r\n    console.error(\"Error in CategoryContent:\", error);\r\n    return notFound();\r\n  }\r\n}\r\n\r\nexport default function CategoryPage({\r\n  params,\r\n}: {\r\n  params: Promise<{ slug: string }>;\r\n}) {\r\n  const resolvedParams = use(params);\r\n  \r\n  if (!validateSlug(resolvedParams?.slug)) {\r\n    return notFound();\r\n  }\r\n\r\n  return (\r\n    <Suspense fallback={<LoadingSpinner />}>\r\n      <CategoryContent slug={resolvedParams.slug} />\r\n    </Suspense>\r\n  );\r\n}\r\n\r\n// Pre-fetch paths at build time\r\nexport async function generateStaticParams() {\r\n  const categories = await client.fetch(`\r\n    *[_type == \"category\"] {\r\n      \"slug\": slug.current\r\n    }\r\n  `);\r\n\r\n  return categories.map((category: { slug: string }) => ({\r\n    slug: category.slug,\r\n  }));\r\n}\r\n"],"names":[],"mappings":";;;;;AAAA;AACA;AAEA;AACA;AAEA;AAHA;;;;;;;;AAKA,8BAA8B;AAC9B,SAAS,aAAa,IAAwB;IAC5C,OAAO,OAAO,SAAS,YAAY,KAAK,MAAM,GAAG;AACnD;AAEA,uBAAuB;AACvB,eAAe,gBAAgB,EAAE,IAAI,EAAoB;IACvD,IAAI;QACF,MAAM,CAAC,UAAU,SAAS,GAAG,MAAM,QAAQ,GAAG,CAAC;YAC7C,2HAAA,CAAA,SAAM,CAAC,KAAK,CACV,CAAC;;;;;;;;;;;;;;;;SAgBA,CAAC,EACF;gBAAE;YAAK;YAET,2HAAA,CAAA,SAAM,CAAC,KAAK,CACV,CAAC;;;;SAIA,CAAC,EACF;gBAAE;YAAK;SAEV;QAED,IAAI,CAAC,UAAU,OAAO,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD;QAE7B,qBACE,8OAAC;YAAI,WAAU;sBACb,cAAA,8OAAC,wIAAA,CAAA,UAAW;gBAAC,UAAU;;;;;;;;;;;IAG7B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,OAAO,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD;IAChB;AACF;AAEe,SAAS,aAAa,EACnC,MAAM,EAGP;IACC,MAAM,iBAAiB,CAAA,GAAA,qMAAA,CAAA,MAAG,AAAD,EAAE;IAE3B,IAAI,CAAC,aAAa,gBAAgB,OAAO;QACvC,OAAO,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD;IAChB;IAEA,qBACE,8OAAC,qMAAA,CAAA,WAAQ;QAAC,wBAAU,8OAAC,2IAAA,CAAA,UAAc;;;;;kBACjC,cAAA,8OAAC;YAAgB,MAAM,eAAe,IAAI;;;;;;;;;;;AAGhD;AAGO,eAAe;IACpB,MAAM,aAAa,MAAM,2HAAA,CAAA,SAAM,CAAC,KAAK,CAAC,CAAC;;;;EAIvC,CAAC;IAED,OAAO,WAAW,GAAG,CAAC,CAAC,WAA+B,CAAC;YACrD,MAAM,SAAS,IAAI;QACrB,CAAC;AACH"}},
    {"offset": {"line": 152, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 163, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/.next-internal/server/app/(site)/projects/category/[slug]/page/actions.js"],"sourcesContent":["__turbopack_export_value__({\n});"],"names":[],"mappings":"AAAA,2BAA2B,CAC3B"}},
    {"offset": {"line": 164, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}